# -*- coding: utf-8 -*-
"""ReadPDFtoExcel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1020TB4d4WJqIl3sVV50sEN093a-e6mnm
"""

# pdf2image
# paddleocr
# common
# dual
# tight
# data
# prox
# paddle
# pip install paddlepaddle
# pip install protobuf==3.19.0

# use python 3.8.x
# !pip install pdf2image
# !apt-get install poppler-utils or choco install poppler
# !python3 -m pip install paddlepaddle -i https://mirror.baidu.com/pypi/simple
# !pip install paddleocr
# !git clone https://github.com/PaddlePaddle/PaddleOCR
# pip install Polygon


import pip

def installModules():
  if hasattr(pip, "main"):
    pip.main(["install","pdf2image"])
    pip.main(["install","paddleocr"])
    pip.main(["install","common"])
    pip.main(["install","dual"])
    pip.main(["install","tight"])
    pip.main(["install","data"])
    pip.main(["install","prox"])
    pip.main(["install","paddle"])
    pip.main(["install","paddlepaddle"])
    pip.main(["install","protobuf==3.19.0"])
    pip.main(["install","XlsxWriter"])
    
    pip.main(["install","poppler-utils"])
    pip.main(["install","matplotlib"])
    pip.main(["install","cv2"])

from pdf2image import convert_from_path
from paddleocr import PaddleOCR, draw_ocr
import matplotlib
import cv2
import os
import xlsxwriter
import shutil

def writeToExcel(data):
  filename = "result"
  if os.path.exists(filename + '.xlsx'):
    os.remove(filename + '.xlsx')
  # Create an new Excel file and add a worksheet.
  workbook = xlsxwriter.Workbook(filename + '.xlsx')
  worksheet = workbook.add_worksheet()

  # Widen the first column to make the text clearer.
  # worksheet.set_column('A:A', 20)

  # Add a bold format to use to highlight cells.
  # bold = workbook.add_format({'bold': True})

  # Write some simple text.
  # worksheet.write('A1', 'Hello')

  # Text with formatting.
  # worksheet.write('A2', 'World', bold)

  # Write some numbers, with row/column notation.
  x = 1
  worksheet.write(0, 0, "Name")
  worksheet.write(0, 1, "Code")
  worksheet.write(0, 2, "Price")

  for item in data:
    print(item)
    worksheet.write(x, 0, item["name"])
    worksheet.write(x, 1, item["code"])
    worksheet.write(x, 2, item["price"])
    x=x+1

  # Insert an image.
  # worksheet.insert_image('B5', 'logo.png')

  workbook.close()

def generateImages():
  images = convert_from_path("factura2.pdf")

  if not os.path.exists("pages"):
    os.makedirs("pages")

  for I in range(len(images)):
    images[I].save('pages/page'+str(I)+'.jpg', "JPEG")

def arrangeValues(values):
  rearranged_values = []
  for i in range(0,len(values)):
    value = values[i]
    if len(value.split(" ")) > 1 and not value.find("%") > -1:
      rearranged_values.append("NAME: " + value)
    
    elif len(value.split("/")) > 1 and value.find("%") < 0:
      rearranged_values.append("CODE: " + value.split("/")[1])
    
    elif value.find("/") < 0 and value.find(",") > 0 and values[i-1].find("%") < 0:
      rearranged_values.append("PRICE: " + value)
    
    elif value.find("%") and value.find(",") < 0:
      rearranged_values.append("DISCOUNT: " + value)
    
    elif values[i-1].find("%") > 0 and len(value.split(",")) > 1 :
      rearranged_values.append("DISCOUNT AMOUNT: " + value)
  
  return rearranged_values

def cleanTemps():
  if os.path.exists("pages"):
    shutil.rmtree("pages")
# installModules()


#### --------------------------------------------


generateImages()

ocrModel = PaddleOCR(lang="es")

img_path = os.path.join(".", "pages/page0.jpg")

result = ocrModel.ocr(img_path)

values = []

for res in result[0]:
  values.append(res[1][0])

limit_top_index = values.index('Consumidor Final')
limit_bottom_index = values.index('SUBTOTAL SIN DESCUENTOS')

filtered_values = values[limit_top_index+1:limit_bottom_index]
rearranged_values = arrangeValues(filtered_values)

start = 0
end = len(rearranged_values)
objects = []
while start < end:
  value = rearranged_values[start]
  record = {}
  print(value)

  if value.find("NAME:") > -1 and rearranged_values[start+4].find("DISCOUNT AMOUNT:") > -1:
    print("HAS DISCOUNT")
    objects.append({
      "name": value.replace("NAME: ",""), 
      "code": rearranged_values[start+1].replace("CODE: ",""),
      "price": rearranged_values[start+2].replace("PRICE: ",""),
      "discount": rearranged_values[start+3].replace("DISCOUNT: ",""),
      "discount_amount": rearranged_values[start+4].replace("DISCOUNT AMOUNT: ","")
      })
    start = start + 5
  elif value.find("NAME:") > -1 and rearranged_values[start+3].find("NAME") > -1 and rearranged_values[start+1].find("CODE") > -1 and rearranged_values[start+2].find("PRICE") > -1:
    print("HAS NOT DISCOUNT")
    objects.append({
      "name": value.replace("NAME: ",""), 
      "code": rearranged_values[start+1].replace("CODE: ",""),
      "price": rearranged_values[start+2].replace("PRICE: ",""),
      })
    start = start + 3
  start = start + 1

# print(objects)
writeToExcel(objects)
cleanTemps()